// <auto-generated />
using System;
using Acadmy_Reletional_EF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcadmyReletionalEF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250421125347_ManyTo")]
    partial class ManyTo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId")
                        .IsUnique()
                        .HasFilter("[OfficeId] IS NOT NULL");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("officeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("FRI")
                        .HasColumnType("bit");

                    b.Property<bool>("MON")
                        .HasColumnType("bit");

                    b.Property<bool>("SAT")
                        .HasColumnType("bit");

                    b.Property<bool>("SUN")
                        .HasColumnType("bit");

                    b.Property<bool>("THU")
                        .HasColumnType("bit");

                    b.Property<bool>("TUS")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WED")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseeId")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("sectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("courseId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.SectionSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EndtTime")
                        .HasColumnType("time");

                    b.Property<int>("Schedule")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionSchedule");
                });

            modelBuilder.Entity("ScheduleSection", b =>
                {
                    b.Property<int>("SchudulesId")
                        .HasColumnType("int");

                    b.Property<int>("sectionsId")
                        .HasColumnType("int");

                    b.HasKey("SchudulesId", "sectionsId");

                    b.HasIndex("sectionsId");

                    b.ToTable("ScheduleSection");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Instructor", b =>
                {
                    b.HasOne("Acadmy_Reletional_EF.Entities.Office", "office")
                        .WithOne("Instructor")
                        .HasForeignKey("Acadmy_Reletional_EF.Entities.Instructor", "OfficeId");

                    b.Navigation("office");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Section", b =>
                {
                    b.HasOne("Acadmy_Reletional_EF.Entities.Instructor", "instructor")
                        .WithMany("sections")
                        .HasForeignKey("InstructorId");

                    b.HasOne("Acadmy_Reletional_EF.Entities.Course", "course")
                        .WithMany("sections")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.SectionSchedule", b =>
                {
                    b.HasOne("Acadmy_Reletional_EF.Entities.Schedule", null)
                        .WithMany("sectionSchedules")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("Acadmy_Reletional_EF.Entities.Section", null)
                        .WithMany("SectionSchedules")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("ScheduleSection", b =>
                {
                    b.HasOne("Acadmy_Reletional_EF.Entities.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchudulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acadmy_Reletional_EF.Entities.Section", null)
                        .WithMany()
                        .HasForeignKey("sectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Course", b =>
                {
                    b.Navigation("sections");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Instructor", b =>
                {
                    b.Navigation("sections");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Office", b =>
                {
                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Schedule", b =>
                {
                    b.Navigation("sectionSchedules");
                });

            modelBuilder.Entity("Acadmy_Reletional_EF.Entities.Section", b =>
                {
                    b.Navigation("SectionSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
